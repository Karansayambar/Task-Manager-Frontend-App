import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { createTodo, fetchAllTasks, changeStatusOfIsImportant } from "../redux/thunk/todoThunkActions";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";

const ListPage = ({ setCurrentSelected, setViewTask,viewTask, view, sidebar }) => {
  const [task, setTask] = useState("");
  const [isImportant, setIsImportant] = useState(false);
  const [dueDate, setDueDate] = useState("");
  const [isPriority, setIsPriority] = useState(false)
  const [checkedTaskId, setCheckedTaskId] = useState(null);
  const [isModal, setIsModal] = useState(false);
  const [priority, setPriority] = useState("Medium");
  
  const dispatch = useDispatch();
  let { loading, tasks } = useSelector((state) => state.todo);
  const theme = useSelector((state) => state.theme.theme)
  console.log(tasks);

  const changeImportanceStatus = (todoID, status) => {
        dispatch(changeStatusOfIsImportant(todoID,status, tasks))
  }

  useEffect(() => {
    if(!viewTask){
      setCheckedTaskId(null)
    }
  
   
  }, [viewTask])
  


  const toggleCalender = () => {
    setIsModal(!isModal);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const todoData = {
      task,
      isImportant,
      dueDate: new Date(dueDate),
      priority,
    };

    try {
       dispatch(createTodo(todoData));
      // alert('TODO Created Successfully!');
      setTask("");
      setIsImportant(false);
      setPriority("Low");
    } catch (error) {
      console.error("Failed to save the todo:", error);
      alert("Failed to create TODO. Please try again.");
    }
  };
  // console.log(priority)
  useEffect(() => {
    const fetchTasks = () => {
      try {
        dispatch(fetchAllTasks());
      } catch (err) {
        console.log(err);
      }
    };
    fetchTasks();
  }, [dispatch,viewTask]);

  const handleCheckboxChange = (id, todo) => {
    if (id === checkedTaskId) {
      // Checkbox was already checked, now we need to uncheck it
      setCheckedTaskId(null); // Clear the checked task ID
      setViewTask(false); // Close the viewTask
  } else {
      // Checkbox is being checked
      setCheckedTaskId(id); // Set the new checked task ID
      setCurrentSelected(todo); // Set the current selected task
      setViewTask(true); // Open the viewTask
  }
     // Set the checked task ID 
  };
  return (
    <div className={`my-2 container`}>
      <div className="flex flex-col">
        <div className="flex justify-start text-sm  border-b-2">
          <span>To Do</span>
          <svg
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M9.86274 9C8.65111 9 8.04529 9 7.76477 9.23959C7.52136 9.44749 7.39218 9.75934 7.4173 10.0785C7.44624 10.4462 7.87462 10.8746 8.73137 11.7314L10.8686 13.8686C11.2646 14.2646 11.4627 14.4627 11.691 14.5368C11.8918 14.6021 12.1082 14.6021 12.309 14.5368C12.5373 14.4627 12.7354 14.2646 13.1314 13.8686L15.2686 11.7314C16.1254 10.8746 16.5538 10.4462 16.5827 10.0785C16.6078 9.75934 16.4786 9.44749 16.2352 9.23959C15.9547 9 15.3489 9 14.1373 9H9.86274Z"
              fill="#142E15"
              fillOpacity="0.62"
            />
          </svg>
        </div>
        <div className="py-2">
          <form
            className={`flex flex-col relative justify-between h-[178px]  bg-[#F0F8F2]`}
            onSubmit={handleSubmit}
          >
            <div className="flex justify-between font-semibold text-black/80 px-10 py-4">
              <input
                placeholder="Add A Task"
                className="w-full p-3 bg-transparent border-2 border-primary/50 rounded-md"
                value={task}
                onChange={(e) => setTask(e.target.value)}
                required={true}
              />
            </div>
           {
            isPriority && 
            <div className="flex justify-start space-x-8 px-10">
            <div className="flex justify-start space-x-2">
              <input
              type="radio"
              value='High'
              name="test"
              onChange={()=> setPriority("High")}
              className="w-5 h-5"
              />
              <span className="text-[15px] font-semibold text-primary/90">High</span>
            </div>
            <div className="flex justify-start space-x-2">
              <input
              type="radio"
              value='Medium'
              onChange={()=> setPriority("Medium")}

              name="test"
              className="w-5 h-5"
              />
              <span className="text-[15px] font-semibold text-primary/90">Medium</span>
            </div>
            <div className="flex justify-start space-x-2">
              <input
              type="radio"
              value='Low'
              name="test"
              onChange={()=> setPriority("Low")}

              className="w-5 h-5"
              />
              <span className="text-[15px] font-semibold text-primary/90">Low</span>
            </div>
          </div>
           }
            
            {isModal && (
              <div className="modal absolute top-44 left-40  ">
                <div className="modal-content">
                  {/* <h2>Select a Date</h2> */}
                  <DatePicker
                    selected={dueDate}
                    onChange={(date) => {
                      setDueDate(date);
                      setIsModal(false);
                    }}
                    inline
                  />
                  <button className="">Close</button>
                </div>
              </div>
            )}
            <div className=" ">
              <div className="flex justify-between px-10 py-5 ">
                <div className="flex justify-start space-x-6">
                  <svg
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <g clipPath="url(#clip0_5_3238)">
                      <path
                        d="M21.6733 18.5534C21.0305 17.9802 20.4676 17.3232 20 16.6C19.489 15.6019 19.183 14.5116 19.1 13.3934V10.1C19.1044 8.34376 18.4673 6.64633 17.3085 5.32666C16.1496 4.007 14.5488 3.15592 12.8067 2.93335V2.07335C12.8067 1.83731 12.7129 1.61093 12.546 1.44402C12.3791 1.27712 12.1527 1.18335 11.9167 1.18335C11.6806 1.18335 11.4542 1.27712 11.2873 1.44402C11.1204 1.61093 11.0267 1.83731 11.0267 2.07335V2.94668C9.30016 3.1853 7.71864 4.04152 6.57501 5.35675C5.43138 6.67199 4.80315 8.35711 4.80666 10.1V13.3934C4.7237 14.5116 4.41768 15.6019 3.90666 16.6C3.44725 17.3216 2.89346 17.9785 2.25999 18.5534C2.18888 18.6158 2.13189 18.6927 2.0928 18.7789C2.05372 18.8651 2.03345 18.9587 2.03333 19.0534V19.96C2.03333 20.1368 2.10356 20.3064 2.22859 20.4314C2.35361 20.5564 2.52318 20.6267 2.69999 20.6267H21.2333C21.4101 20.6267 21.5797 20.5564 21.7047 20.4314C21.8298 20.3064 21.9 20.1368 21.9 19.96V19.0534C21.8999 18.9587 21.8796 18.8651 21.8405 18.7789C21.8014 18.6927 21.7444 18.6158 21.6733 18.5534ZM3.41999 19.2934C4.04012 18.694 4.58623 18.0226 5.04666 17.2934C5.69052 16.088 6.06578 14.7575 6.14666 13.3934V10.1C6.12022 9.31871 6.25127 8.54007 6.53202 7.81046C6.81277 7.08086 7.23747 6.41521 7.78082 5.85315C8.32418 5.2911 8.97509 4.84413 9.69478 4.53887C10.4145 4.2336 11.1882 4.07629 11.97 4.07629C12.7517 4.07629 13.5255 4.2336 14.2452 4.53887C14.9649 4.84413 15.6158 5.2911 16.1592 5.85315C16.7025 6.41521 17.1272 7.08086 17.408 7.81046C17.6887 8.54007 17.8198 9.31871 17.7933 10.1V13.3934C17.8742 14.7575 18.2495 16.088 18.8933 17.2934C19.3538 18.0226 19.8999 18.694 20.52 19.2934H3.41999Z"
                        fill="#1B281B"
                      />
                      <path
                        d="M12 22.8533C12.42 22.8436 12.823 22.6858 13.1378 22.4076C13.4525 22.1294 13.6588 21.7489 13.72 21.3333H10.2134C10.2764 21.7602 10.4923 22.1497 10.8209 22.4293C11.1496 22.7089 11.5686 22.8595 12 22.8533Z"
                        fill="#1B281B"
                      />
                    </g>
                    <defs>
                      <clipPath id="clip0_5_3238">
                        <rect width="24" height="24" fill="white" />
                      </clipPath>
                    </defs>
                  </svg>
                  <svg
                    onClick={()=> setIsPriority(!isPriority)}
                    className="cursor-pointer"
                    width="24"
                    height="22"
                    viewBox="0 0 24 22"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M16.5 7.19901V5.00001H7.49996C6.47885 4.99991 5.47461 5.26041 4.58231 5.75685C3.69 6.25329 2.93916 6.96924 2.40085 7.83693C1.86254 8.70462 1.55459 9.69533 1.50613 10.7153C1.45768 11.7352 1.67033 12.7507 2.12396 13.6655C2.16788 13.7538 2.194 13.8498 2.20081 13.9481C2.20762 14.0465 2.195 14.1452 2.16366 14.2387C2.13232 14.3321 2.08288 14.4185 2.01816 14.4928C1.95344 14.5672 1.87471 14.6281 1.78646 14.672C1.69821 14.7159 1.60217 14.742 1.50383 14.7489C1.40549 14.7557 1.30677 14.743 1.21331 14.7117C1.11985 14.6804 1.03347 14.6309 0.959117 14.5662C0.884763 14.5015 0.823884 14.4228 0.779957 14.3345C0.212317 13.1909 -0.0539804 11.9213 0.00628627 10.646C0.0665529 9.37066 0.451389 8.13184 1.12434 7.04685C1.7973 5.96186 2.73609 5.06663 3.85181 4.44594C4.96752 3.82525 6.22322 3.49966 7.49996 3.50001H16.5V1.30101C16.5 1.22975 16.5203 1.15998 16.5586 1.09986C16.5968 1.03974 16.6514 0.99176 16.7159 0.961541C16.7805 0.931322 16.8523 0.920114 16.9229 0.929228C16.9936 0.938343 17.0602 0.967404 17.115 1.01301L20.655 3.96201C20.835 4.11201 20.835 4.38801 20.655 4.53801L17.115 7.48701C17.0602 7.53261 16.9936 7.56167 16.9229 7.57079C16.8523 7.5799 16.7805 7.56869 16.7159 7.53847C16.6514 7.50825 16.5968 7.46028 16.5586 7.40016C16.5203 7.34004 16.5 7.27026 16.5 7.19901ZM22.215 7.32801C22.393 7.23959 22.5989 7.22547 22.7873 7.28875C22.9758 7.35204 23.1314 7.48755 23.22 7.66551C23.7876 8.80912 24.0539 10.0787 23.9936 11.354C23.9334 12.6294 23.5485 13.8682 22.8756 14.9532C22.2026 16.0382 21.2638 16.9334 20.1481 17.5541C19.0324 18.1748 17.7767 18.5004 16.5 18.5H7.49996V20.699C7.49993 20.7703 7.4796 20.84 7.44136 20.9002C7.40311 20.9603 7.34852 21.0083 7.28399 21.0385C7.21946 21.0687 7.14766 21.0799 7.07699 21.0708C7.00632 21.0617 6.93971 21.0326 6.88496 20.987L3.34496 18.038C3.30275 18.0028 3.2688 17.9588 3.2455 17.909C3.2222 17.8592 3.21013 17.805 3.21013 17.75C3.21013 17.6951 3.2222 17.6408 3.2455 17.591C3.2688 17.5412 3.30275 17.4972 3.34496 17.462L6.88496 14.513C6.93971 14.4674 7.00632 14.4383 7.07699 14.4292C7.14766 14.4201 7.21946 14.4313 7.28399 14.4615C7.34852 14.4918 7.40311 14.5397 7.44136 14.5999C7.4796 14.66 7.49993 14.7298 7.49996 14.801V17H16.5C17.5212 17.0004 18.5256 16.74 19.4181 16.2437C20.3106 15.7474 21.0617 15.0315 21.6002 14.1637C22.1386 13.296 22.4467 12.3052 22.4953 11.2851C22.5438 10.265 22.3311 9.24943 21.8775 8.33451C21.789 8.15646 21.7749 7.9506 21.8382 7.76216C21.9015 7.57371 22.037 7.41659 22.215 7.32801Z"
                      fill="#1B281B"
                    />
                  </svg>
                  <svg
                    className="cursor-pointer"

                    onClick={toggleCalender}
                    width="20"
                    height="21"
                    viewBox="0 0 20 21"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M13 3V1M13 3V5M13 3H8.5M1 9V18C1 18.5304 1.21071 19.0391 1.58579 19.4142C1.96086 19.7893 2.46957 20 3 20H17C17.5304 20 18.0391 19.7893 18.4142 19.4142C18.7893 19.0391 19 18.5304 19 18V9M1 9H19M1 9V5C1 4.46957 1.21071 3.96086 1.58579 3.58579C1.96086 3.21071 2.46957 3 3 3H5M19 9V5C19 4.46957 18.7893 3.96086 18.4142 3.58579C18.0391 3.21071 17.5304 3 17 3H16.5M5 1V5"
                      stroke="#1B281B"
                      strokeWidth="1.5"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    />
                  </svg>
                </div>
                <div>
                  <button
                    type="submit"
                    className="font-semibold px-2.5 py-1.5 rounded-md text-primary/90 bg-[#46944929]"
                    disabled={loading}
                  >
                    {loading ? "Adding..." : "ADD TASK"}
                  </button>
                </div>
              </div>
            </div>
          </form>
        </div>

        {/* for list view */}
        { tasks && view === "List" && (
          <div className=" max-h-[664px] no-scrollbar  overflow-y-scroll ">
            {tasks && tasks.map((todo, index) => (
                <div
                 
                  
                  key={index}
                  className="flex items-center cursor-pointer justify-between p-8 border"
                >
                  
                  <div className="flex items-center justify-between gap-4">
                  <input
                  type="checkbox"
                  checked={checkedTaskId === todo._id}
                  onChange={() => handleCheckboxChange(todo._id, todo)}
                />   <p className={`text-lg}`}>{todo.task}</p>
                  </div>
                  <div className="p-1" onClick={()=> changeImportanceStatus(todo._id,todo.isImportant)}>
                  {todo.isImportant ? (
                    <svg
                      width="22"
                      height="21"
                      viewBox="0 0 22 21"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M21.4231 8.11812C21.3294 7.82986 21.1524 7.5758 20.9145 7.38795C20.6766 7.2001 20.3884 7.08686 20.0863 7.06249L14.555 6.61624L12.4194 1.45155C12.3039 1.17013 12.1073 0.929412 11.8547 0.759996C11.602 0.59058 11.3047 0.500122 11.0005 0.500122C10.6963 0.500122 10.3989 0.59058 10.1463 0.759996C9.89363 0.929412 9.69706 1.17013 9.58157 1.45155L7.44782 6.6153L1.91375 7.06249C1.61111 7.08809 1.32274 7.20243 1.08479 7.39118C0.846839 7.57994 0.669882 7.83472 0.57609 8.12361C0.482298 8.41249 0.475843 8.72263 0.557532 9.01516C0.639222 9.3077 0.805424 9.56962 1.03531 9.76812L5.25407 13.4084L3.96875 18.8516C3.89687 19.1473 3.91447 19.4577 4.01932 19.7434C4.12417 20.0291 4.31154 20.2771 4.55765 20.4562C4.80376 20.6352 5.09751 20.737 5.4016 20.7488C5.7057 20.7605 6.00643 20.6817 6.26563 20.5222L11 17.6084L15.7372 20.5222C15.9965 20.6798 16.2966 20.7571 16.5998 20.7445C16.9029 20.7318 17.1955 20.6298 17.4408 20.4512C17.6861 20.2725 17.873 20.0254 17.9781 19.7407C18.0832 19.4561 18.1017 19.1467 18.0313 18.8516L16.7413 13.4075L20.96 9.76718C21.1918 9.56902 21.3595 9.30652 21.4419 9.01296C21.5244 8.71939 21.5178 8.40796 21.4231 8.11812Z"
                        fill="black"
                      />
                    </svg>
                  ) : (
                    <svg
                      
                      width="22"
                      height="21"
                      viewBox="0 0 22 21"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M21.4231 8.11812C21.3294 7.82986 21.1524 7.5758 20.9145 7.38795C20.6766 7.2001 20.3884 7.08686 20.0863 7.06249L14.555 6.61624L12.4194 1.45155C12.3039 1.17013 12.1073 0.929412 11.8547 0.759996C11.602 0.59058 11.3047 0.500122 11.0005 0.500122C10.6963 0.500122 10.3989 0.59058 10.1463 0.759996C9.89363 0.929412 9.69706 1.17013 9.58156 1.45155L7.44781 6.61531L1.91375 7.06249C1.61111 7.08809 1.32274 7.20243 1.08479 7.39119C0.846839 7.57994 0.669882 7.83472 0.57609 8.12361C0.482298 8.41249 0.475843 8.72263 0.557532 9.01516C0.639222 9.3077 0.805424 9.56962 1.03531 9.76812L5.25406 13.4084L3.96875 18.8516C3.89687 19.1473 3.91447 19.4577 4.01932 19.7434C4.12417 20.0291 4.31154 20.2771 4.55765 20.4562C4.80376 20.6352 5.09751 20.737 5.4016 20.7488C5.7057 20.7605 6.00643 20.6817 6.26563 20.5222L11 17.6084L15.7372 20.5222C15.9965 20.6798 16.2966 20.7571 16.5997 20.7445C16.9029 20.7318 17.1955 20.6298 17.4408 20.4512C17.6861 20.2726 17.873 20.0254 17.9781 19.7407C18.0832 19.4561 18.1017 19.1467 18.0313 18.8516L16.7413 13.4075L20.96 9.76718C21.1918 9.56902 21.3595 9.30653 21.4419 9.01296C21.5244 8.71939 21.5178 8.40796 21.4231 8.11812ZM19.985 8.63093L15.4194 12.5684C15.3153 12.6582 15.2378 12.7748 15.1955 12.9056C15.1532 13.0364 15.1476 13.1763 15.1794 13.31L16.5744 19.1975C16.578 19.2056 16.5783 19.2148 16.5754 19.2232C16.5724 19.2315 16.5664 19.2385 16.5584 19.2425C16.5416 19.2556 16.5369 19.2528 16.5228 19.2425L11.3928 16.0878C11.2747 16.0152 11.1387 15.9767 11 15.9767C10.8613 15.9767 10.7253 16.0152 10.6072 16.0878L5.47719 19.2444C5.46313 19.2528 5.45938 19.2556 5.44156 19.2444C5.43365 19.2403 5.42759 19.2334 5.42462 19.225C5.42166 19.2167 5.42202 19.2075 5.42563 19.1994L6.82063 13.3119C6.85242 13.1781 6.84685 13.0382 6.80452 12.9075C6.7622 12.7767 6.68475 12.66 6.58063 12.5703L2.015 8.6328C2.00375 8.62343 1.99344 8.61499 2.00281 8.58593C2.01219 8.55687 2.01969 8.56062 2.03375 8.55874L8.02625 8.07499C8.1637 8.0632 8.29523 8.01373 8.40638 7.93203C8.51753 7.85032 8.60399 7.73954 8.65625 7.61187L10.9644 2.02343C10.9719 2.00749 10.9747 1.99999 10.9972 1.99999C11.0197 1.99999 11.0225 2.00749 11.03 2.02343L13.3438 7.61187C13.3965 7.73958 13.4835 7.85025 13.5952 7.93164C13.7068 8.01303 13.8388 8.06199 13.9766 8.07312L19.9691 8.55687C19.9831 8.55687 19.9916 8.55687 20 8.58405C20.0084 8.61124 20 8.62156 19.985 8.63093Z"
                        fill="black"
                      />
                    </svg>
                  )}
                  </div>
                </div>
              ))} 
          </div>
        )}

        {/* for Grid view */}
        {tasks && view === "Grid" && (
          <div
            className={`grid grid-cols-1  ${
              viewTask && sidebar
                ? "tab:grid grid-cols-2  gap-3"
                : "tab:grid grid-cols-3  gap-3"
            } `}
          >
            {tasks && tasks.map((todo, index) => (
              <div
                key={index}
                className="flex  items-center  justify-between p-8 border"
              >
                <div className="flex items-center justify-between gap-4">
                <input
                  type="checkbox"
                  checked={checkedTaskId === todo._id}
                  onChange={() => handleCheckboxChange(todo._id, todo)}
                />
                 <p className={`text-lg `}>{todo.task}</p>
                </div>
                <div className="p-1" onClick={()=> changeImportanceStatus(todo._id,todo.isImportant)}>

                {todo.isImportant ? (
                  <svg
                    width="22"
                    height="21"
                    viewBox="0 0 22 21"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M21.4231 8.11812C21.3294 7.82986 21.1524 7.5758 20.9145 7.38795C20.6766 7.2001 20.3884 7.08686 20.0863 7.06249L14.555 6.61624L12.4194 1.45155C12.3039 1.17013 12.1073 0.929412 11.8547 0.759996C11.602 0.59058 11.3047 0.500122 11.0005 0.500122C10.6963 0.500122 10.3989 0.59058 10.1463 0.759996C9.89363 0.929412 9.69706 1.17013 9.58157 1.45155L7.44782 6.6153L1.91375 7.06249C1.61111 7.08809 1.32274 7.20243 1.08479 7.39118C0.846839 7.57994 0.669882 7.83472 0.57609 8.12361C0.482298 8.41249 0.475843 8.72263 0.557532 9.01516C0.639222 9.3077 0.805424 9.56962 1.03531 9.76812L5.25407 13.4084L3.96875 18.8516C3.89687 19.1473 3.91447 19.4577 4.01932 19.7434C4.12417 20.0291 4.31154 20.2771 4.55765 20.4562C4.80376 20.6352 5.09751 20.737 5.4016 20.7488C5.7057 20.7605 6.00643 20.6817 6.26563 20.5222L11 17.6084L15.7372 20.5222C15.9965 20.6798 16.2966 20.7571 16.5998 20.7445C16.9029 20.7318 17.1955 20.6298 17.4408 20.4512C17.6861 20.2725 17.873 20.0254 17.9781 19.7407C18.0832 19.4561 18.1017 19.1467 18.0313 18.8516L16.7413 13.4075L20.96 9.76718C21.1918 9.56902 21.3595 9.30652 21.4419 9.01296C21.5244 8.71939 21.5178 8.40796 21.4231 8.11812Z"
                      fill="black"
                    />
                  </svg>
                ) : (
                  <svg
                    width="22"
                    height="21"
                    viewBox="0 0 22 21"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M21.4231 8.11812C21.3294 7.82986 21.1524 7.5758 20.9145 7.38795C20.6766 7.2001 20.3884 7.08686 20.0863 7.06249L14.555 6.61624L12.4194 1.45155C12.3039 1.17013 12.1073 0.929412 11.8547 0.759996C11.602 0.59058 11.3047 0.500122 11.0005 0.500122C10.6963 0.500122 10.3989 0.59058 10.1463 0.759996C9.89363 0.929412 9.69706 1.17013 9.58156 1.45155L7.44781 6.61531L1.91375 7.06249C1.61111 7.08809 1.32274 7.20243 1.08479 7.39119C0.846839 7.57994 0.669882 7.83472 0.57609 8.12361C0.482298 8.41249 0.475843 8.72263 0.557532 9.01516C0.639222 9.3077 0.805424 9.56962 1.03531 9.76812L5.25406 13.4084L3.96875 18.8516C3.89687 19.1473 3.91447 19.4577 4.01932 19.7434C4.12417 20.0291 4.31154 20.2771 4.55765 20.4562C4.80376 20.6352 5.09751 20.737 5.4016 20.7488C5.7057 20.7605 6.00643 20.6817 6.26563 20.5222L11 17.6084L15.7372 20.5222C15.9965 20.6798 16.2966 20.7571 16.5997 20.7445C16.9029 20.7318 17.1955 20.6298 17.4408 20.4512C17.6861 20.2726 17.873 20.0254 17.9781 19.7407C18.0832 19.4561 18.1017 19.1467 18.0313 18.8516L16.7413 13.4075L20.96 9.76718C21.1918 9.56902 21.3595 9.30653 21.4419 9.01296C21.5244 8.71939 21.5178 8.40796 21.4231 8.11812ZM19.985 8.63093L15.4194 12.5684C15.3153 12.6582 15.2378 12.7748 15.1955 12.9056C15.1532 13.0364 15.1476 13.1763 15.1794 13.31L16.5744 19.1975C16.578 19.2056 16.5783 19.2148 16.5754 19.2232C16.5724 19.2315 16.5664 19.2385 16.5584 19.2425C16.5416 19.2556 16.5369 19.2528 16.5228 19.2425L11.3928 16.0878C11.2747 16.0152 11.1387 15.9767 11 15.9767C10.8613 15.9767 10.7253 16.0152 10.6072 16.0878L5.47719 19.2444C5.46313 19.2528 5.45938 19.2556 5.44156 19.2444C5.43365 19.2403 5.42759 19.2334 5.42462 19.225C5.42166 19.2167 5.42202 19.2075 5.42563 19.1994L6.82063 13.3119C6.85242 13.1781 6.84685 13.0382 6.80452 12.9075C6.7622 12.7767 6.68475 12.66 6.58063 12.5703L2.015 8.6328C2.00375 8.62343 1.99344 8.61499 2.00281 8.58593C2.01219 8.55687 2.01969 8.56062 2.03375 8.55874L8.02625 8.07499C8.1637 8.0632 8.29523 8.01373 8.40638 7.93203C8.51753 7.85032 8.60399 7.73954 8.65625 7.61187L10.9644 2.02343C10.9719 2.00749 10.9747 1.99999 10.9972 1.99999C11.0197 1.99999 11.0225 2.00749 11.03 2.02343L13.3438 7.61187C13.3965 7.73958 13.4835 7.85025 13.5952 7.93164C13.7068 8.01303 13.8388 8.06199 13.9766 8.07312L19.9691 8.55687C19.9831 8.55687 19.9916 8.55687 20 8.58405C20.0084 8.61124 20 8.62156 19.985 8.63093Z"
                      fill="black"
                    />
                  </svg>
                )}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default ListPage;
